/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.projects.dashboard.project.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.projects.dashboard.project.model.Project;
import com.liferay.projects.dashboard.project.model.ProjectModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Project service. Represents a row in the &quot;PD_Project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectImpl}.
 * </p>
 *
 * @author Ryan Park
 * @see ProjectImpl
 * @see Project
 * @see ProjectModel
 * @generated
 */
@ProviderType
public class ProjectModelImpl extends BaseModelImpl<Project>
	implements ProjectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link Project} interface instead.
	 */
	public static final String TABLE_NAME = "PD_Project";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "businessUnitId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "priority", Types.INTEGER },
			{ "health", Types.INTEGER },
			{ "expectedStartDate", Types.TIMESTAMP },
			{ "expectedEndDate", Types.TIMESTAMP },
			{ "actualStartDate", Types.TIMESTAMP },
			{ "actualEndDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("businessUnitId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("health", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("expectedStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expectedEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actualStartDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("actualEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table PD_Project (uuid_ VARCHAR(75) null,projectId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,businessUnitId LONG,name VARCHAR(75) null,description VARCHAR(75) null,priority INTEGER,health INTEGER,expectedStartDate DATE null,expectedEndDate DATE null,actualStartDate DATE null,actualEndDate DATE null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table PD_Project";
	public static final String ORDER_BY_JPQL = " ORDER BY project.expectedEndDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PD_Project.expectedEndDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.projects.dashboard.project.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.projects.dashboard.project.model.Project"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.projects.dashboard.project.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.projects.dashboard.project.model.Project"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.projects.dashboard.project.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.projects.dashboard.project.model.Project"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long EXPECTEDENDDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.projects.dashboard.project.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.projects.dashboard.project.model.Project"));

	public ProjectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Project.class;
	}

	@Override
	public String getModelClassName() {
		return Project.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("projectId", getProjectId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("businessUnitId", getBusinessUnitId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("priority", getPriority());
		attributes.put("health", getHealth());
		attributes.put("expectedStartDate", getExpectedStartDate());
		attributes.put("expectedEndDate", getExpectedEndDate());
		attributes.put("actualStartDate", getActualStartDate());
		attributes.put("actualEndDate", getActualEndDate());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long businessUnitId = (Long)attributes.get("businessUnitId");

		if (businessUnitId != null) {
			setBusinessUnitId(businessUnitId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}

		Integer health = (Integer)attributes.get("health");

		if (health != null) {
			setHealth(health);
		}

		Date expectedStartDate = (Date)attributes.get("expectedStartDate");

		if (expectedStartDate != null) {
			setExpectedStartDate(expectedStartDate);
		}

		Date expectedEndDate = (Date)attributes.get("expectedEndDate");

		if (expectedEndDate != null) {
			setExpectedEndDate(expectedEndDate);
		}

		Date actualStartDate = (Date)attributes.get("actualStartDate");

		if (actualStartDate != null) {
			setActualStartDate(actualStartDate);
		}

		Date actualEndDate = (Date)attributes.get("actualEndDate");

		if (actualEndDate != null) {
			setActualEndDate(actualEndDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getBusinessUnitId() {
		return _businessUnitId;
	}

	@Override
	public void setBusinessUnitId(long businessUnitId) {
		_businessUnitId = businessUnitId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	@Override
	public int getHealth() {
		return _health;
	}

	@Override
	public void setHealth(int health) {
		_health = health;
	}

	@Override
	public Date getExpectedStartDate() {
		return _expectedStartDate;
	}

	@Override
	public void setExpectedStartDate(Date expectedStartDate) {
		_expectedStartDate = expectedStartDate;
	}

	@Override
	public Date getExpectedEndDate() {
		return _expectedEndDate;
	}

	@Override
	public void setExpectedEndDate(Date expectedEndDate) {
		_columnBitmask = -1L;

		_expectedEndDate = expectedEndDate;
	}

	@Override
	public Date getActualStartDate() {
		return _actualStartDate;
	}

	@Override
	public void setActualStartDate(Date actualStartDate) {
		_actualStartDate = actualStartDate;
	}

	@Override
	public Date getActualEndDate() {
		return _actualEndDate;
	}

	@Override
	public void setActualEndDate(Date actualEndDate) {
		_actualEndDate = actualEndDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Project.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Project.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Project toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Project)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectImpl projectImpl = new ProjectImpl();

		projectImpl.setUuid(getUuid());
		projectImpl.setProjectId(getProjectId());
		projectImpl.setCompanyId(getCompanyId());
		projectImpl.setUserId(getUserId());
		projectImpl.setUserName(getUserName());
		projectImpl.setCreateDate(getCreateDate());
		projectImpl.setModifiedDate(getModifiedDate());
		projectImpl.setBusinessUnitId(getBusinessUnitId());
		projectImpl.setName(getName());
		projectImpl.setDescription(getDescription());
		projectImpl.setPriority(getPriority());
		projectImpl.setHealth(getHealth());
		projectImpl.setExpectedStartDate(getExpectedStartDate());
		projectImpl.setExpectedEndDate(getExpectedEndDate());
		projectImpl.setActualStartDate(getActualStartDate());
		projectImpl.setActualEndDate(getActualEndDate());
		projectImpl.setStatus(getStatus());

		projectImpl.resetOriginalValues();

		return projectImpl;
	}

	@Override
	public int compareTo(Project project) {
		int value = 0;

		value = DateUtil.compareTo(getExpectedEndDate(),
				project.getExpectedEndDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Project)) {
			return false;
		}

		Project project = (Project)obj;

		long primaryKey = project.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectModelImpl projectModelImpl = this;

		projectModelImpl._originalUuid = projectModelImpl._uuid;

		projectModelImpl._originalCompanyId = projectModelImpl._companyId;

		projectModelImpl._setOriginalCompanyId = false;

		projectModelImpl._setModifiedDate = false;

		projectModelImpl._originalStatus = projectModelImpl._status;

		projectModelImpl._setOriginalStatus = false;

		projectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Project> toCacheModel() {
		ProjectCacheModel projectCacheModel = new ProjectCacheModel();

		projectCacheModel.uuid = getUuid();

		String uuid = projectCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectCacheModel.uuid = null;
		}

		projectCacheModel.projectId = getProjectId();

		projectCacheModel.companyId = getCompanyId();

		projectCacheModel.userId = getUserId();

		projectCacheModel.userName = getUserName();

		String userName = projectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectCacheModel.createDate = createDate.getTime();
		}
		else {
			projectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectCacheModel.businessUnitId = getBusinessUnitId();

		projectCacheModel.name = getName();

		String name = projectCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			projectCacheModel.name = null;
		}

		projectCacheModel.description = getDescription();

		String description = projectCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			projectCacheModel.description = null;
		}

		projectCacheModel.priority = getPriority();

		projectCacheModel.health = getHealth();

		Date expectedStartDate = getExpectedStartDate();

		if (expectedStartDate != null) {
			projectCacheModel.expectedStartDate = expectedStartDate.getTime();
		}
		else {
			projectCacheModel.expectedStartDate = Long.MIN_VALUE;
		}

		Date expectedEndDate = getExpectedEndDate();

		if (expectedEndDate != null) {
			projectCacheModel.expectedEndDate = expectedEndDate.getTime();
		}
		else {
			projectCacheModel.expectedEndDate = Long.MIN_VALUE;
		}

		Date actualStartDate = getActualStartDate();

		if (actualStartDate != null) {
			projectCacheModel.actualStartDate = actualStartDate.getTime();
		}
		else {
			projectCacheModel.actualStartDate = Long.MIN_VALUE;
		}

		Date actualEndDate = getActualEndDate();

		if (actualEndDate != null) {
			projectCacheModel.actualEndDate = actualEndDate.getTime();
		}
		else {
			projectCacheModel.actualEndDate = Long.MIN_VALUE;
		}

		projectCacheModel.status = getStatus();

		return projectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", businessUnitId=");
		sb.append(getBusinessUnitId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append(", health=");
		sb.append(getHealth());
		sb.append(", expectedStartDate=");
		sb.append(getExpectedStartDate());
		sb.append(", expectedEndDate=");
		sb.append(getExpectedEndDate());
		sb.append(", actualStartDate=");
		sb.append(getActualStartDate());
		sb.append(", actualEndDate=");
		sb.append(getActualEndDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.liferay.projects.dashboard.project.model.Project");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>businessUnitId</column-name><column-value><![CDATA[");
		sb.append(getBusinessUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>health</column-name><column-value><![CDATA[");
		sb.append(getHealth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedStartDate</column-name><column-value><![CDATA[");
		sb.append(getExpectedStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expectedEndDate</column-name><column-value><![CDATA[");
		sb.append(getExpectedEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualStartDate</column-name><column-value><![CDATA[");
		sb.append(getActualStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actualEndDate</column-name><column-value><![CDATA[");
		sb.append(getActualEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Project.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Project.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _projectId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _businessUnitId;
	private String _name;
	private String _description;
	private int _priority;
	private int _health;
	private Date _expectedStartDate;
	private Date _expectedEndDate;
	private Date _actualStartDate;
	private Date _actualEndDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _columnBitmask;
	private Project _escapedModel;
}