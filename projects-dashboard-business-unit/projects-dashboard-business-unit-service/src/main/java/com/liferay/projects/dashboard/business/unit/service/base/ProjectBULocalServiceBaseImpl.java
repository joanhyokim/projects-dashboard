/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.projects.dashboard.business.unit.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import com.liferay.projects.dashboard.business.unit.model.ProjectBU;
import com.liferay.projects.dashboard.business.unit.service.ProjectBULocalService;
import com.liferay.projects.dashboard.business.unit.service.persistence.BusinessUnitPersistence;
import com.liferay.projects.dashboard.business.unit.service.persistence.ProjectBUPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the project b u local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.projects.dashboard.business.unit.service.impl.ProjectBULocalServiceImpl}.
 * </p>
 *
 * @author Yury Butrymovich
 * @see com.liferay.projects.dashboard.business.unit.service.impl.ProjectBULocalServiceImpl
 * @see com.liferay.projects.dashboard.business.unit.service.ProjectBULocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class ProjectBULocalServiceBaseImpl extends BaseLocalServiceImpl
	implements ProjectBULocalService, IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.projects.dashboard.business.unit.service.ProjectBULocalServiceUtil} to access the project b u local service.
	 */

	/**
	 * Adds the project b u to the database. Also notifies the appropriate model listeners.
	 *
	 * @param projectBU the project b u
	 * @return the project b u that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProjectBU addProjectBU(ProjectBU projectBU) {
		projectBU.setNew(true);

		return projectBUPersistence.update(projectBU);
	}

	/**
	 * Creates a new project b u with the primary key. Does not add the project b u to the database.
	 *
	 * @param projectBUId the primary key for the new project b u
	 * @return the new project b u
	 */
	@Override
	public ProjectBU createProjectBU(long projectBUId) {
		return projectBUPersistence.create(projectBUId);
	}

	/**
	 * Deletes the project b u with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param projectBUId the primary key of the project b u
	 * @return the project b u that was removed
	 * @throws PortalException if a project b u with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProjectBU deleteProjectBU(long projectBUId)
		throws PortalException {
		return projectBUPersistence.remove(projectBUId);
	}

	/**
	 * Deletes the project b u from the database. Also notifies the appropriate model listeners.
	 *
	 * @param projectBU the project b u
	 * @return the project b u that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProjectBU deleteProjectBU(ProjectBU projectBU) {
		return projectBUPersistence.remove(projectBU);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ProjectBU.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return projectBUPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.projects.dashboard.business.unit.model.impl.ProjectBUModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return projectBUPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.projects.dashboard.business.unit.model.impl.ProjectBUModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return projectBUPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return projectBUPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return projectBUPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ProjectBU fetchProjectBU(long projectBUId) {
		return projectBUPersistence.fetchByPrimaryKey(projectBUId);
	}

	/**
	 * Returns the project b u with the matching UUID and company.
	 *
	 * @param uuid the project b u's UUID
	 * @param companyId the primary key of the company
	 * @return the matching project b u, or <code>null</code> if a matching project b u could not be found
	 */
	@Override
	public ProjectBU fetchProjectBUByUuidAndCompanyId(String uuid,
		long companyId) {
		return projectBUPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the project b u with the primary key.
	 *
	 * @param projectBUId the primary key of the project b u
	 * @return the project b u
	 * @throws PortalException if a project b u with the primary key could not be found
	 */
	@Override
	public ProjectBU getProjectBU(long projectBUId) throws PortalException {
		return projectBUPersistence.findByPrimaryKey(projectBUId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(projectBULocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ProjectBU.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("projectBUId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(projectBULocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(ProjectBU.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("projectBUId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(projectBULocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(ProjectBU.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("projectBUId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<ProjectBU>() {
				@Override
				public void performAction(ProjectBU projectBU)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						projectBU);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(ProjectBU.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return projectBULocalService.deleteProjectBU((ProjectBU)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return projectBUPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the project b u with the matching UUID and company.
	 *
	 * @param uuid the project b u's UUID
	 * @param companyId the primary key of the company
	 * @return the matching project b u
	 * @throws PortalException if a matching project b u could not be found
	 */
	@Override
	public ProjectBU getProjectBUByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException {
		return projectBUPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns a range of all the project b us.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.liferay.projects.dashboard.business.unit.model.impl.ProjectBUModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of project b us
	 * @param end the upper bound of the range of project b us (not inclusive)
	 * @return the range of project b us
	 */
	@Override
	public List<ProjectBU> getProjectBUs(int start, int end) {
		return projectBUPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of project b us.
	 *
	 * @return the number of project b us
	 */
	@Override
	public int getProjectBUsCount() {
		return projectBUPersistence.countAll();
	}

	/**
	 * Updates the project b u in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param projectBU the project b u
	 * @return the project b u that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProjectBU updateProjectBU(ProjectBU projectBU) {
		return projectBUPersistence.update(projectBU);
	}

	/**
	 * Returns the business unit local service.
	 *
	 * @return the business unit local service
	 */
	public com.liferay.projects.dashboard.business.unit.service.BusinessUnitLocalService getBusinessUnitLocalService() {
		return businessUnitLocalService;
	}

	/**
	 * Sets the business unit local service.
	 *
	 * @param businessUnitLocalService the business unit local service
	 */
	public void setBusinessUnitLocalService(
		com.liferay.projects.dashboard.business.unit.service.BusinessUnitLocalService businessUnitLocalService) {
		this.businessUnitLocalService = businessUnitLocalService;
	}

	/**
	 * Returns the business unit persistence.
	 *
	 * @return the business unit persistence
	 */
	public BusinessUnitPersistence getBusinessUnitPersistence() {
		return businessUnitPersistence;
	}

	/**
	 * Sets the business unit persistence.
	 *
	 * @param businessUnitPersistence the business unit persistence
	 */
	public void setBusinessUnitPersistence(
		BusinessUnitPersistence businessUnitPersistence) {
		this.businessUnitPersistence = businessUnitPersistence;
	}

	/**
	 * Returns the project b u local service.
	 *
	 * @return the project b u local service
	 */
	public ProjectBULocalService getProjectBULocalService() {
		return projectBULocalService;
	}

	/**
	 * Sets the project b u local service.
	 *
	 * @param projectBULocalService the project b u local service
	 */
	public void setProjectBULocalService(
		ProjectBULocalService projectBULocalService) {
		this.projectBULocalService = projectBULocalService;
	}

	/**
	 * Returns the project b u persistence.
	 *
	 * @return the project b u persistence
	 */
	public ProjectBUPersistence getProjectBUPersistence() {
		return projectBUPersistence;
	}

	/**
	 * Sets the project b u persistence.
	 *
	 * @param projectBUPersistence the project b u persistence
	 */
	public void setProjectBUPersistence(
		ProjectBUPersistence projectBUPersistence) {
		this.projectBUPersistence = projectBUPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.liferay.projects.dashboard.business.unit.model.ProjectBU",
			projectBULocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.projects.dashboard.business.unit.model.ProjectBU");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return ProjectBULocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return ProjectBU.class;
	}

	protected String getModelClassName() {
		return ProjectBU.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = projectBUPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.liferay.projects.dashboard.business.unit.service.BusinessUnitLocalService.class)
	protected com.liferay.projects.dashboard.business.unit.service.BusinessUnitLocalService businessUnitLocalService;
	@BeanReference(type = BusinessUnitPersistence.class)
	protected BusinessUnitPersistence businessUnitPersistence;
	@BeanReference(type = ProjectBULocalService.class)
	protected ProjectBULocalService projectBULocalService;
	@BeanReference(type = ProjectBUPersistence.class)
	protected ProjectBUPersistence projectBUPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}